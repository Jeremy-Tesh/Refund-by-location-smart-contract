{
  "language": "Solidity",
  "sources": {
    "contracts/Refund.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\n\ncontract Refund {\n    uint256 public userCount;\n    address owner;\n    uint256 employer;\nstruct Employee {\n        string fullName;\n        string email;\n        uint256 longtuide;\n        uint256 latitude;\n        uint256 permittedRange;\n    }\n\n    mapping(address => Employee) public user;\n    mapping(address => bool) public employeeCondition;\n    event UserCreated(string user, uint256 id);\n    address[] public employees;\nconstructor()  {\n       \n        owner = msg.sender;\n    }\n\nfunction getOwner() public view returns (address) {\n        return owner;\n    }\n\nfunction createEmployee(address empAddress, string memory name, uint256 lat, uint256 lon, uint256 range) public {\n        \n    // require(msg.sender == owner);\n        user[empAddress].fullName = name;\n        user[empAddress].latitude = lat;\n        user[empAddress].longtuide = lon;\n        user[empAddress].permittedRange = range;\n        employees.push(empAddress);\n    }\n\nfunction getEmployeeDetail(address empAddress) public view returns (string memory, uint256, uint256, uint256) {\n        return (user[empAddress].fullName, user[empAddress].latitude, user[empAddress].longtuide, user[empAddress].permittedRange);\n    }\n\nfunction getEmployees() public view returns (address[] memory) {\n        return employees;\n    }\n\nfunction getCoordinate(uint256 lat, uint256 lon, uint256 time) public  {\n       require(time >= 0 && time <= 86400);\n       uint256 distance = calculateDistance(lat, lon);\n       if (distance > user[msg.sender].permittedRange) {\n           employeeCondition[msg.sender] = false;\n       } else {\n           employeeCondition[msg.sender] = true;\n       }\n\n    }\nfunction calculateDistance(uint256 lat2, uint256 lon2) public view returns (uint256 dist)\n    {\n        (,uint256 lat1, uint256 lon1,) = getEmployeeDetail(msg.sender);\n\n        uint256 distance = uint256(sqrt((lat2 - lat1) ** 2 + (lon2 - lon1) ** 2));\n        return uint256(distance);\n        \n\n    }\n\n\n    // Find the square root of a number using the Babylonian method\n    function sqrt(uint x) public pure returns (uint y) {\n    uint z = (x + 1) / 2;\n    y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n        return y;\n    }\nfunction say() public pure returns(string memory result) {\n        result = \"Hello world\";\n        return result;\n    }\n   \n   \n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}